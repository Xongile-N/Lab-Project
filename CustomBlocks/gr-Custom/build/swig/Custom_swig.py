# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Custom_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Custom_swig')
    _Custom_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Custom_swig', [dirname(__file__)])
        except ImportError:
            import _Custom_swig
            return _Custom_swig
        try:
            _mod = imp.load_module('_Custom_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Custom_swig = swig_import_helper()
    del swig_import_helper
else:
    import _Custom_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _Custom_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _Custom_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _Custom_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _Custom_swig.high_res_timer_epoch()
class CC_Encoder_Custom(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::CC_Encoder_Custom.

    To avoid accidental use of raw pointers, Custom::CC_Encoder_Custom's constructor is in a private implementation class. Custom::CC_Encoder_Custom::make is the public interface for creating new instances.

    Args:
        constraint : 
        frameLength : 
        polynomial : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constraint, frameLength, polynomial):
        """
        make(int constraint, int frameLength, std::vector< int,std::allocator< int > > polynomial) -> CC_Encoder_Custom_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::CC_Encoder_Custom.

        To avoid accidental use of raw pointers, Custom::CC_Encoder_Custom's constructor is in a private implementation class. Custom::CC_Encoder_Custom::make is the public interface for creating new instances.

        Args:
            constraint : 
            frameLength : 
            polynomial : 
        """
        return _Custom_swig.CC_Encoder_Custom_make(constraint, frameLength, polynomial)

    make = staticmethod(make)
    __swig_destroy__ = _Custom_swig.delete_CC_Encoder_Custom
    __del__ = lambda self: None
CC_Encoder_Custom_swigregister = _Custom_swig.CC_Encoder_Custom_swigregister
CC_Encoder_Custom_swigregister(CC_Encoder_Custom)

def CC_Encoder_Custom_make(constraint, frameLength, polynomial):
    """
    CC_Encoder_Custom_make(int constraint, int frameLength, std::vector< int,std::allocator< int > > polynomial) -> CC_Encoder_Custom_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::CC_Encoder_Custom.

    To avoid accidental use of raw pointers, Custom::CC_Encoder_Custom's constructor is in a private implementation class. Custom::CC_Encoder_Custom::make is the public interface for creating new instances.

    Args:
        constraint : 
        frameLength : 
        polynomial : 
    """
    return _Custom_swig.CC_Encoder_Custom_make(constraint, frameLength, polynomial)

class CC_Encoder_Custom_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::Custom::CC_Encoder_Custom)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::Custom::CC_Encoder_Custom)> self) -> CC_Encoder_Custom_sptr
        __init__(boost::shared_ptr<(gr::Custom::CC_Encoder_Custom)> self, CC_Encoder_Custom p) -> CC_Encoder_Custom_sptr
        """
        this = _Custom_swig.new_CC_Encoder_Custom_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(CC_Encoder_Custom_sptr self) -> CC_Encoder_Custom"""
        return _Custom_swig.CC_Encoder_Custom_sptr___deref__(self)

    __swig_destroy__ = _Custom_swig.delete_CC_Encoder_Custom_sptr
    __del__ = lambda self: None

    def make(self, constraint, frameLength, polynomial):
        """
        make(CC_Encoder_Custom_sptr self, int constraint, int frameLength, std::vector< int,std::allocator< int > > polynomial) -> CC_Encoder_Custom_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::CC_Encoder_Custom.

        To avoid accidental use of raw pointers, Custom::CC_Encoder_Custom's constructor is in a private implementation class. Custom::CC_Encoder_Custom::make is the public interface for creating new instances.

        Args:
            constraint : 
            frameLength : 
            polynomial : 
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_make(self, constraint, frameLength, polynomial)


    def history(self):
        """history(CC_Encoder_Custom_sptr self) -> unsigned int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CC_Encoder_Custom_sptr self, int which, int delay)
        declare_sample_delay(CC_Encoder_Custom_sptr self, unsigned int delay)
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(CC_Encoder_Custom_sptr self, int which) -> unsigned int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(CC_Encoder_Custom_sptr self) -> int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(CC_Encoder_Custom_sptr self) -> double"""
        return _Custom_swig.CC_Encoder_Custom_sptr_relative_rate(self)


    def start(self):
        """start(CC_Encoder_Custom_sptr self) -> bool"""
        return _Custom_swig.CC_Encoder_Custom_sptr_start(self)


    def stop(self):
        """stop(CC_Encoder_Custom_sptr self) -> bool"""
        return _Custom_swig.CC_Encoder_Custom_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(CC_Encoder_Custom_sptr self, unsigned int which_input) -> uint64_t"""
        return _Custom_swig.CC_Encoder_Custom_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(CC_Encoder_Custom_sptr self, unsigned int which_output) -> uint64_t"""
        return _Custom_swig.CC_Encoder_Custom_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(CC_Encoder_Custom_sptr self) -> int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(CC_Encoder_Custom_sptr self, int m)"""
        return _Custom_swig.CC_Encoder_Custom_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CC_Encoder_Custom_sptr self)"""
        return _Custom_swig.CC_Encoder_Custom_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CC_Encoder_Custom_sptr self) -> bool"""
        return _Custom_swig.CC_Encoder_Custom_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(CC_Encoder_Custom_sptr self, int m)"""
        return _Custom_swig.CC_Encoder_Custom_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(CC_Encoder_Custom_sptr self) -> int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(CC_Encoder_Custom_sptr self, int i) -> long"""
        return _Custom_swig.CC_Encoder_Custom_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CC_Encoder_Custom_sptr self, long max_output_buffer)
        set_max_output_buffer(CC_Encoder_Custom_sptr self, int port, long max_output_buffer)
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(CC_Encoder_Custom_sptr self, int i) -> long"""
        return _Custom_swig.CC_Encoder_Custom_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CC_Encoder_Custom_sptr self, long min_output_buffer)
        set_min_output_buffer(CC_Encoder_Custom_sptr self, int port, long min_output_buffer)
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CC_Encoder_Custom_sptr self, int which) -> float
        pc_input_buffers_full(CC_Encoder_Custom_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CC_Encoder_Custom_sptr self, int which) -> float
        pc_input_buffers_full_avg(CC_Encoder_Custom_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CC_Encoder_Custom_sptr self, int which) -> float
        pc_input_buffers_full_var(CC_Encoder_Custom_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CC_Encoder_Custom_sptr self, int which) -> float
        pc_output_buffers_full(CC_Encoder_Custom_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CC_Encoder_Custom_sptr self, int which) -> float
        pc_output_buffers_full_avg(CC_Encoder_Custom_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CC_Encoder_Custom_sptr self, int which) -> float
        pc_output_buffers_full_var(CC_Encoder_Custom_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(CC_Encoder_Custom_sptr self) -> float"""
        return _Custom_swig.CC_Encoder_Custom_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(CC_Encoder_Custom_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _Custom_swig.CC_Encoder_Custom_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(CC_Encoder_Custom_sptr self)"""
        return _Custom_swig.CC_Encoder_Custom_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(CC_Encoder_Custom_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _Custom_swig.CC_Encoder_Custom_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(CC_Encoder_Custom_sptr self) -> int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(CC_Encoder_Custom_sptr self) -> int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(CC_Encoder_Custom_sptr self, int priority) -> int"""
        return _Custom_swig.CC_Encoder_Custom_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(CC_Encoder_Custom_sptr self) -> std::string"""
        return _Custom_swig.CC_Encoder_Custom_sptr_name(self)


    def symbol_name(self):
        """symbol_name(CC_Encoder_Custom_sptr self) -> std::string"""
        return _Custom_swig.CC_Encoder_Custom_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(CC_Encoder_Custom_sptr self) -> io_signature_sptr"""
        return _Custom_swig.CC_Encoder_Custom_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(CC_Encoder_Custom_sptr self) -> io_signature_sptr"""
        return _Custom_swig.CC_Encoder_Custom_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(CC_Encoder_Custom_sptr self) -> long"""
        return _Custom_swig.CC_Encoder_Custom_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(CC_Encoder_Custom_sptr self) -> basic_block_sptr"""
        return _Custom_swig.CC_Encoder_Custom_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(CC_Encoder_Custom_sptr self, int ninputs, int noutputs) -> bool"""
        return _Custom_swig.CC_Encoder_Custom_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(CC_Encoder_Custom_sptr self) -> std::string"""
        return _Custom_swig.CC_Encoder_Custom_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(CC_Encoder_Custom_sptr self, std::string name)"""
        return _Custom_swig.CC_Encoder_Custom_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(CC_Encoder_Custom_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _Custom_swig.CC_Encoder_Custom_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(CC_Encoder_Custom_sptr self) -> swig_int_ptr"""
        return _Custom_swig.CC_Encoder_Custom_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(CC_Encoder_Custom_sptr self) -> swig_int_ptr"""
        return _Custom_swig.CC_Encoder_Custom_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(CC_Encoder_Custom_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _Custom_swig.CC_Encoder_Custom_sptr_message_subscribers(self, which_port)

CC_Encoder_Custom_sptr_swigregister = _Custom_swig.CC_Encoder_Custom_sptr_swigregister
CC_Encoder_Custom_sptr_swigregister(CC_Encoder_Custom_sptr)


CC_Encoder_Custom_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CC_Encoder_Custom = CC_Encoder_Custom.make;

class DiffEncoderFlush(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::DiffEncoderFlush.

    To avoid accidental use of raw pointers, Custom::DiffEncoderFlush's constructor is in a private implementation class. Custom::DiffEncoderFlush::make is the public interface for creating new instances.

    Args:
        modulus : 
        flush : 
        flushLength : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modulus, flush, flushLength):
        """
        make(int modulus, bool flush, int flushLength) -> DiffEncoderFlush_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::DiffEncoderFlush.

        To avoid accidental use of raw pointers, Custom::DiffEncoderFlush's constructor is in a private implementation class. Custom::DiffEncoderFlush::make is the public interface for creating new instances.

        Args:
            modulus : 
            flush : 
            flushLength : 
        """
        return _Custom_swig.DiffEncoderFlush_make(modulus, flush, flushLength)

    make = staticmethod(make)
    __swig_destroy__ = _Custom_swig.delete_DiffEncoderFlush
    __del__ = lambda self: None
DiffEncoderFlush_swigregister = _Custom_swig.DiffEncoderFlush_swigregister
DiffEncoderFlush_swigregister(DiffEncoderFlush)

def DiffEncoderFlush_make(modulus, flush, flushLength):
    """
    DiffEncoderFlush_make(int modulus, bool flush, int flushLength) -> DiffEncoderFlush_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::DiffEncoderFlush.

    To avoid accidental use of raw pointers, Custom::DiffEncoderFlush's constructor is in a private implementation class. Custom::DiffEncoderFlush::make is the public interface for creating new instances.

    Args:
        modulus : 
        flush : 
        flushLength : 
    """
    return _Custom_swig.DiffEncoderFlush_make(modulus, flush, flushLength)

class DiffEncoderFlush_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::Custom::DiffEncoderFlush)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::Custom::DiffEncoderFlush)> self) -> DiffEncoderFlush_sptr
        __init__(boost::shared_ptr<(gr::Custom::DiffEncoderFlush)> self, DiffEncoderFlush p) -> DiffEncoderFlush_sptr
        """
        this = _Custom_swig.new_DiffEncoderFlush_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(DiffEncoderFlush_sptr self) -> DiffEncoderFlush"""
        return _Custom_swig.DiffEncoderFlush_sptr___deref__(self)

    __swig_destroy__ = _Custom_swig.delete_DiffEncoderFlush_sptr
    __del__ = lambda self: None

    def make(self, modulus, flush, flushLength):
        """
        make(DiffEncoderFlush_sptr self, int modulus, bool flush, int flushLength) -> DiffEncoderFlush_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::DiffEncoderFlush.

        To avoid accidental use of raw pointers, Custom::DiffEncoderFlush's constructor is in a private implementation class. Custom::DiffEncoderFlush::make is the public interface for creating new instances.

        Args:
            modulus : 
            flush : 
            flushLength : 
        """
        return _Custom_swig.DiffEncoderFlush_sptr_make(self, modulus, flush, flushLength)


    def history(self):
        """history(DiffEncoderFlush_sptr self) -> unsigned int"""
        return _Custom_swig.DiffEncoderFlush_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(DiffEncoderFlush_sptr self, int which, int delay)
        declare_sample_delay(DiffEncoderFlush_sptr self, unsigned int delay)
        """
        return _Custom_swig.DiffEncoderFlush_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(DiffEncoderFlush_sptr self, int which) -> unsigned int"""
        return _Custom_swig.DiffEncoderFlush_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(DiffEncoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlush_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(DiffEncoderFlush_sptr self) -> double"""
        return _Custom_swig.DiffEncoderFlush_sptr_relative_rate(self)


    def start(self):
        """start(DiffEncoderFlush_sptr self) -> bool"""
        return _Custom_swig.DiffEncoderFlush_sptr_start(self)


    def stop(self):
        """stop(DiffEncoderFlush_sptr self) -> bool"""
        return _Custom_swig.DiffEncoderFlush_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(DiffEncoderFlush_sptr self, unsigned int which_input) -> uint64_t"""
        return _Custom_swig.DiffEncoderFlush_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(DiffEncoderFlush_sptr self, unsigned int which_output) -> uint64_t"""
        return _Custom_swig.DiffEncoderFlush_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(DiffEncoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlush_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(DiffEncoderFlush_sptr self, int m)"""
        return _Custom_swig.DiffEncoderFlush_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(DiffEncoderFlush_sptr self)"""
        return _Custom_swig.DiffEncoderFlush_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(DiffEncoderFlush_sptr self) -> bool"""
        return _Custom_swig.DiffEncoderFlush_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(DiffEncoderFlush_sptr self, int m)"""
        return _Custom_swig.DiffEncoderFlush_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(DiffEncoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlush_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(DiffEncoderFlush_sptr self, int i) -> long"""
        return _Custom_swig.DiffEncoderFlush_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(DiffEncoderFlush_sptr self, long max_output_buffer)
        set_max_output_buffer(DiffEncoderFlush_sptr self, int port, long max_output_buffer)
        """
        return _Custom_swig.DiffEncoderFlush_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(DiffEncoderFlush_sptr self, int i) -> long"""
        return _Custom_swig.DiffEncoderFlush_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(DiffEncoderFlush_sptr self, long min_output_buffer)
        set_min_output_buffer(DiffEncoderFlush_sptr self, int port, long min_output_buffer)
        """
        return _Custom_swig.DiffEncoderFlush_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(DiffEncoderFlush_sptr self, int which) -> float
        pc_input_buffers_full(DiffEncoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlush_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(DiffEncoderFlush_sptr self, int which) -> float
        pc_input_buffers_full_avg(DiffEncoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlush_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(DiffEncoderFlush_sptr self, int which) -> float
        pc_input_buffers_full_var(DiffEncoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlush_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(DiffEncoderFlush_sptr self, int which) -> float
        pc_output_buffers_full(DiffEncoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlush_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(DiffEncoderFlush_sptr self, int which) -> float
        pc_output_buffers_full_avg(DiffEncoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlush_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(DiffEncoderFlush_sptr self, int which) -> float
        pc_output_buffers_full_var(DiffEncoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlush_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(DiffEncoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlush_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(DiffEncoderFlush_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _Custom_swig.DiffEncoderFlush_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(DiffEncoderFlush_sptr self)"""
        return _Custom_swig.DiffEncoderFlush_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(DiffEncoderFlush_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _Custom_swig.DiffEncoderFlush_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(DiffEncoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlush_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(DiffEncoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlush_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(DiffEncoderFlush_sptr self, int priority) -> int"""
        return _Custom_swig.DiffEncoderFlush_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(DiffEncoderFlush_sptr self) -> std::string"""
        return _Custom_swig.DiffEncoderFlush_sptr_name(self)


    def symbol_name(self):
        """symbol_name(DiffEncoderFlush_sptr self) -> std::string"""
        return _Custom_swig.DiffEncoderFlush_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(DiffEncoderFlush_sptr self) -> io_signature_sptr"""
        return _Custom_swig.DiffEncoderFlush_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(DiffEncoderFlush_sptr self) -> io_signature_sptr"""
        return _Custom_swig.DiffEncoderFlush_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(DiffEncoderFlush_sptr self) -> long"""
        return _Custom_swig.DiffEncoderFlush_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(DiffEncoderFlush_sptr self) -> basic_block_sptr"""
        return _Custom_swig.DiffEncoderFlush_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(DiffEncoderFlush_sptr self, int ninputs, int noutputs) -> bool"""
        return _Custom_swig.DiffEncoderFlush_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(DiffEncoderFlush_sptr self) -> std::string"""
        return _Custom_swig.DiffEncoderFlush_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(DiffEncoderFlush_sptr self, std::string name)"""
        return _Custom_swig.DiffEncoderFlush_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(DiffEncoderFlush_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _Custom_swig.DiffEncoderFlush_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(DiffEncoderFlush_sptr self) -> swig_int_ptr"""
        return _Custom_swig.DiffEncoderFlush_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(DiffEncoderFlush_sptr self) -> swig_int_ptr"""
        return _Custom_swig.DiffEncoderFlush_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(DiffEncoderFlush_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _Custom_swig.DiffEncoderFlush_sptr_message_subscribers(self, which_port)

DiffEncoderFlush_sptr_swigregister = _Custom_swig.DiffEncoderFlush_sptr_swigregister
DiffEncoderFlush_sptr_swigregister(DiffEncoderFlush_sptr)


DiffEncoderFlush_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DiffEncoderFlush = DiffEncoderFlush.make;

class DiffDecoderFlush(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::DiffDecoderFlush.

    To avoid accidental use of raw pointers, Custom::DiffDecoderFlush's constructor is in a private implementation class. Custom::DiffDecoderFlush::make is the public interface for creating new instances.

    Args:
        modulus : 
        flush : 
        flushLength : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modulus, flush, flushLength):
        """
        make(int modulus, bool flush, int flushLength) -> DiffDecoderFlush_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::DiffDecoderFlush.

        To avoid accidental use of raw pointers, Custom::DiffDecoderFlush's constructor is in a private implementation class. Custom::DiffDecoderFlush::make is the public interface for creating new instances.

        Args:
            modulus : 
            flush : 
            flushLength : 
        """
        return _Custom_swig.DiffDecoderFlush_make(modulus, flush, flushLength)

    make = staticmethod(make)
    __swig_destroy__ = _Custom_swig.delete_DiffDecoderFlush
    __del__ = lambda self: None
DiffDecoderFlush_swigregister = _Custom_swig.DiffDecoderFlush_swigregister
DiffDecoderFlush_swigregister(DiffDecoderFlush)

def DiffDecoderFlush_make(modulus, flush, flushLength):
    """
    DiffDecoderFlush_make(int modulus, bool flush, int flushLength) -> DiffDecoderFlush_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::DiffDecoderFlush.

    To avoid accidental use of raw pointers, Custom::DiffDecoderFlush's constructor is in a private implementation class. Custom::DiffDecoderFlush::make is the public interface for creating new instances.

    Args:
        modulus : 
        flush : 
        flushLength : 
    """
    return _Custom_swig.DiffDecoderFlush_make(modulus, flush, flushLength)

class DiffDecoderFlush_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::Custom::DiffDecoderFlush)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::Custom::DiffDecoderFlush)> self) -> DiffDecoderFlush_sptr
        __init__(boost::shared_ptr<(gr::Custom::DiffDecoderFlush)> self, DiffDecoderFlush p) -> DiffDecoderFlush_sptr
        """
        this = _Custom_swig.new_DiffDecoderFlush_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(DiffDecoderFlush_sptr self) -> DiffDecoderFlush"""
        return _Custom_swig.DiffDecoderFlush_sptr___deref__(self)

    __swig_destroy__ = _Custom_swig.delete_DiffDecoderFlush_sptr
    __del__ = lambda self: None

    def make(self, modulus, flush, flushLength):
        """
        make(DiffDecoderFlush_sptr self, int modulus, bool flush, int flushLength) -> DiffDecoderFlush_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::DiffDecoderFlush.

        To avoid accidental use of raw pointers, Custom::DiffDecoderFlush's constructor is in a private implementation class. Custom::DiffDecoderFlush::make is the public interface for creating new instances.

        Args:
            modulus : 
            flush : 
            flushLength : 
        """
        return _Custom_swig.DiffDecoderFlush_sptr_make(self, modulus, flush, flushLength)


    def history(self):
        """history(DiffDecoderFlush_sptr self) -> unsigned int"""
        return _Custom_swig.DiffDecoderFlush_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(DiffDecoderFlush_sptr self, int which, int delay)
        declare_sample_delay(DiffDecoderFlush_sptr self, unsigned int delay)
        """
        return _Custom_swig.DiffDecoderFlush_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(DiffDecoderFlush_sptr self, int which) -> unsigned int"""
        return _Custom_swig.DiffDecoderFlush_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(DiffDecoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffDecoderFlush_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(DiffDecoderFlush_sptr self) -> double"""
        return _Custom_swig.DiffDecoderFlush_sptr_relative_rate(self)


    def start(self):
        """start(DiffDecoderFlush_sptr self) -> bool"""
        return _Custom_swig.DiffDecoderFlush_sptr_start(self)


    def stop(self):
        """stop(DiffDecoderFlush_sptr self) -> bool"""
        return _Custom_swig.DiffDecoderFlush_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(DiffDecoderFlush_sptr self, unsigned int which_input) -> uint64_t"""
        return _Custom_swig.DiffDecoderFlush_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(DiffDecoderFlush_sptr self, unsigned int which_output) -> uint64_t"""
        return _Custom_swig.DiffDecoderFlush_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(DiffDecoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffDecoderFlush_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(DiffDecoderFlush_sptr self, int m)"""
        return _Custom_swig.DiffDecoderFlush_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(DiffDecoderFlush_sptr self)"""
        return _Custom_swig.DiffDecoderFlush_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(DiffDecoderFlush_sptr self) -> bool"""
        return _Custom_swig.DiffDecoderFlush_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(DiffDecoderFlush_sptr self, int m)"""
        return _Custom_swig.DiffDecoderFlush_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(DiffDecoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffDecoderFlush_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(DiffDecoderFlush_sptr self, int i) -> long"""
        return _Custom_swig.DiffDecoderFlush_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(DiffDecoderFlush_sptr self, long max_output_buffer)
        set_max_output_buffer(DiffDecoderFlush_sptr self, int port, long max_output_buffer)
        """
        return _Custom_swig.DiffDecoderFlush_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(DiffDecoderFlush_sptr self, int i) -> long"""
        return _Custom_swig.DiffDecoderFlush_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(DiffDecoderFlush_sptr self, long min_output_buffer)
        set_min_output_buffer(DiffDecoderFlush_sptr self, int port, long min_output_buffer)
        """
        return _Custom_swig.DiffDecoderFlush_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(DiffDecoderFlush_sptr self, int which) -> float
        pc_input_buffers_full(DiffDecoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffDecoderFlush_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(DiffDecoderFlush_sptr self, int which) -> float
        pc_input_buffers_full_avg(DiffDecoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffDecoderFlush_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(DiffDecoderFlush_sptr self, int which) -> float
        pc_input_buffers_full_var(DiffDecoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffDecoderFlush_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(DiffDecoderFlush_sptr self, int which) -> float
        pc_output_buffers_full(DiffDecoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffDecoderFlush_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(DiffDecoderFlush_sptr self, int which) -> float
        pc_output_buffers_full_avg(DiffDecoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffDecoderFlush_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(DiffDecoderFlush_sptr self, int which) -> float
        pc_output_buffers_full_var(DiffDecoderFlush_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffDecoderFlush_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(DiffDecoderFlush_sptr self) -> float"""
        return _Custom_swig.DiffDecoderFlush_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(DiffDecoderFlush_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _Custom_swig.DiffDecoderFlush_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(DiffDecoderFlush_sptr self)"""
        return _Custom_swig.DiffDecoderFlush_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(DiffDecoderFlush_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _Custom_swig.DiffDecoderFlush_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(DiffDecoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffDecoderFlush_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(DiffDecoderFlush_sptr self) -> int"""
        return _Custom_swig.DiffDecoderFlush_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(DiffDecoderFlush_sptr self, int priority) -> int"""
        return _Custom_swig.DiffDecoderFlush_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(DiffDecoderFlush_sptr self) -> std::string"""
        return _Custom_swig.DiffDecoderFlush_sptr_name(self)


    def symbol_name(self):
        """symbol_name(DiffDecoderFlush_sptr self) -> std::string"""
        return _Custom_swig.DiffDecoderFlush_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(DiffDecoderFlush_sptr self) -> io_signature_sptr"""
        return _Custom_swig.DiffDecoderFlush_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(DiffDecoderFlush_sptr self) -> io_signature_sptr"""
        return _Custom_swig.DiffDecoderFlush_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(DiffDecoderFlush_sptr self) -> long"""
        return _Custom_swig.DiffDecoderFlush_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(DiffDecoderFlush_sptr self) -> basic_block_sptr"""
        return _Custom_swig.DiffDecoderFlush_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(DiffDecoderFlush_sptr self, int ninputs, int noutputs) -> bool"""
        return _Custom_swig.DiffDecoderFlush_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(DiffDecoderFlush_sptr self) -> std::string"""
        return _Custom_swig.DiffDecoderFlush_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(DiffDecoderFlush_sptr self, std::string name)"""
        return _Custom_swig.DiffDecoderFlush_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(DiffDecoderFlush_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _Custom_swig.DiffDecoderFlush_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(DiffDecoderFlush_sptr self) -> swig_int_ptr"""
        return _Custom_swig.DiffDecoderFlush_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(DiffDecoderFlush_sptr self) -> swig_int_ptr"""
        return _Custom_swig.DiffDecoderFlush_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(DiffDecoderFlush_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _Custom_swig.DiffDecoderFlush_sptr_message_subscribers(self, which_port)

DiffDecoderFlush_sptr_swigregister = _Custom_swig.DiffDecoderFlush_sptr_swigregister
DiffDecoderFlush_sptr_swigregister(DiffDecoderFlush_sptr)


DiffDecoderFlush_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DiffDecoderFlush = DiffDecoderFlush.make;

class CCDecoder(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::CCDecoder.

    To avoid accidental use of raw pointers, Custom::CCDecoder's constructor is in a private implementation class. Custom::CCDecoder::make is the public interface for creating new instances.

    Args:
        constraint : 
        frameLength : 
        polys : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constraint, frameLength, polys):
        """
        make(int constraint, int frameLength, std::vector< int,std::allocator< int > > polys) -> CCDecoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::CCDecoder.

        To avoid accidental use of raw pointers, Custom::CCDecoder's constructor is in a private implementation class. Custom::CCDecoder::make is the public interface for creating new instances.

        Args:
            constraint : 
            frameLength : 
            polys : 
        """
        return _Custom_swig.CCDecoder_make(constraint, frameLength, polys)

    make = staticmethod(make)
    __swig_destroy__ = _Custom_swig.delete_CCDecoder
    __del__ = lambda self: None
CCDecoder_swigregister = _Custom_swig.CCDecoder_swigregister
CCDecoder_swigregister(CCDecoder)

def CCDecoder_make(constraint, frameLength, polys):
    """
    CCDecoder_make(int constraint, int frameLength, std::vector< int,std::allocator< int > > polys) -> CCDecoder_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of Custom::CCDecoder.

    To avoid accidental use of raw pointers, Custom::CCDecoder's constructor is in a private implementation class. Custom::CCDecoder::make is the public interface for creating new instances.

    Args:
        constraint : 
        frameLength : 
        polys : 
    """
    return _Custom_swig.CCDecoder_make(constraint, frameLength, polys)

class CCDecoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::Custom::CCDecoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::Custom::CCDecoder)> self) -> CCDecoder_sptr
        __init__(boost::shared_ptr<(gr::Custom::CCDecoder)> self, CCDecoder p) -> CCDecoder_sptr
        """
        this = _Custom_swig.new_CCDecoder_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(CCDecoder_sptr self) -> CCDecoder"""
        return _Custom_swig.CCDecoder_sptr___deref__(self)

    __swig_destroy__ = _Custom_swig.delete_CCDecoder_sptr
    __del__ = lambda self: None

    def make(self, constraint, frameLength, polys):
        """
        make(CCDecoder_sptr self, int constraint, int frameLength, std::vector< int,std::allocator< int > > polys) -> CCDecoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of Custom::CCDecoder.

        To avoid accidental use of raw pointers, Custom::CCDecoder's constructor is in a private implementation class. Custom::CCDecoder::make is the public interface for creating new instances.

        Args:
            constraint : 
            frameLength : 
            polys : 
        """
        return _Custom_swig.CCDecoder_sptr_make(self, constraint, frameLength, polys)


    def history(self):
        """history(CCDecoder_sptr self) -> unsigned int"""
        return _Custom_swig.CCDecoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CCDecoder_sptr self, int which, int delay)
        declare_sample_delay(CCDecoder_sptr self, unsigned int delay)
        """
        return _Custom_swig.CCDecoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(CCDecoder_sptr self, int which) -> unsigned int"""
        return _Custom_swig.CCDecoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(CCDecoder_sptr self) -> int"""
        return _Custom_swig.CCDecoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(CCDecoder_sptr self) -> double"""
        return _Custom_swig.CCDecoder_sptr_relative_rate(self)


    def start(self):
        """start(CCDecoder_sptr self) -> bool"""
        return _Custom_swig.CCDecoder_sptr_start(self)


    def stop(self):
        """stop(CCDecoder_sptr self) -> bool"""
        return _Custom_swig.CCDecoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(CCDecoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _Custom_swig.CCDecoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(CCDecoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _Custom_swig.CCDecoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(CCDecoder_sptr self) -> int"""
        return _Custom_swig.CCDecoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(CCDecoder_sptr self, int m)"""
        return _Custom_swig.CCDecoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CCDecoder_sptr self)"""
        return _Custom_swig.CCDecoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CCDecoder_sptr self) -> bool"""
        return _Custom_swig.CCDecoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(CCDecoder_sptr self, int m)"""
        return _Custom_swig.CCDecoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(CCDecoder_sptr self) -> int"""
        return _Custom_swig.CCDecoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(CCDecoder_sptr self, int i) -> long"""
        return _Custom_swig.CCDecoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CCDecoder_sptr self, long max_output_buffer)
        set_max_output_buffer(CCDecoder_sptr self, int port, long max_output_buffer)
        """
        return _Custom_swig.CCDecoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(CCDecoder_sptr self, int i) -> long"""
        return _Custom_swig.CCDecoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CCDecoder_sptr self, long min_output_buffer)
        set_min_output_buffer(CCDecoder_sptr self, int port, long min_output_buffer)
        """
        return _Custom_swig.CCDecoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CCDecoder_sptr self, int which) -> float
        pc_input_buffers_full(CCDecoder_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CCDecoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CCDecoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(CCDecoder_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CCDecoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CCDecoder_sptr self, int which) -> float
        pc_input_buffers_full_var(CCDecoder_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CCDecoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CCDecoder_sptr self, int which) -> float
        pc_output_buffers_full(CCDecoder_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CCDecoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CCDecoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(CCDecoder_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CCDecoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CCDecoder_sptr self, int which) -> float
        pc_output_buffers_full_var(CCDecoder_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.CCDecoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(CCDecoder_sptr self) -> float"""
        return _Custom_swig.CCDecoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(CCDecoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _Custom_swig.CCDecoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(CCDecoder_sptr self)"""
        return _Custom_swig.CCDecoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(CCDecoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _Custom_swig.CCDecoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(CCDecoder_sptr self) -> int"""
        return _Custom_swig.CCDecoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(CCDecoder_sptr self) -> int"""
        return _Custom_swig.CCDecoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(CCDecoder_sptr self, int priority) -> int"""
        return _Custom_swig.CCDecoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(CCDecoder_sptr self) -> std::string"""
        return _Custom_swig.CCDecoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(CCDecoder_sptr self) -> std::string"""
        return _Custom_swig.CCDecoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(CCDecoder_sptr self) -> io_signature_sptr"""
        return _Custom_swig.CCDecoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(CCDecoder_sptr self) -> io_signature_sptr"""
        return _Custom_swig.CCDecoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(CCDecoder_sptr self) -> long"""
        return _Custom_swig.CCDecoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(CCDecoder_sptr self) -> basic_block_sptr"""
        return _Custom_swig.CCDecoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(CCDecoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _Custom_swig.CCDecoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(CCDecoder_sptr self) -> std::string"""
        return _Custom_swig.CCDecoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(CCDecoder_sptr self, std::string name)"""
        return _Custom_swig.CCDecoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(CCDecoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _Custom_swig.CCDecoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(CCDecoder_sptr self) -> swig_int_ptr"""
        return _Custom_swig.CCDecoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(CCDecoder_sptr self) -> swig_int_ptr"""
        return _Custom_swig.CCDecoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(CCDecoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _Custom_swig.CCDecoder_sptr_message_subscribers(self, which_port)

CCDecoder_sptr_swigregister = _Custom_swig.CCDecoder_sptr_swigregister
CCDecoder_sptr_swigregister(CCDecoder_sptr)


CCDecoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CCDecoder = CCDecoder.make;

class DiffEncoderFlushFixed(object):
    """Proxy of C++ gr::Custom::DiffEncoderFlushFixed class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modulus, flush, flushLength):
        """make(int modulus, bool flush, int flushLength) -> DiffEncoderFlushFixed_sptr"""
        return _Custom_swig.DiffEncoderFlushFixed_make(modulus, flush, flushLength)

    make = staticmethod(make)
    __swig_destroy__ = _Custom_swig.delete_DiffEncoderFlushFixed
    __del__ = lambda self: None
DiffEncoderFlushFixed_swigregister = _Custom_swig.DiffEncoderFlushFixed_swigregister
DiffEncoderFlushFixed_swigregister(DiffEncoderFlushFixed)

def DiffEncoderFlushFixed_make(modulus, flush, flushLength):
    """DiffEncoderFlushFixed_make(int modulus, bool flush, int flushLength) -> DiffEncoderFlushFixed_sptr"""
    return _Custom_swig.DiffEncoderFlushFixed_make(modulus, flush, flushLength)

class DiffEncoderFlushFixed_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::Custom::DiffEncoderFlushFixed)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::Custom::DiffEncoderFlushFixed)> self) -> DiffEncoderFlushFixed_sptr
        __init__(boost::shared_ptr<(gr::Custom::DiffEncoderFlushFixed)> self, DiffEncoderFlushFixed p) -> DiffEncoderFlushFixed_sptr
        """
        this = _Custom_swig.new_DiffEncoderFlushFixed_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(DiffEncoderFlushFixed_sptr self) -> DiffEncoderFlushFixed"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr___deref__(self)

    __swig_destroy__ = _Custom_swig.delete_DiffEncoderFlushFixed_sptr
    __del__ = lambda self: None

    def make(self, modulus, flush, flushLength):
        """make(DiffEncoderFlushFixed_sptr self, int modulus, bool flush, int flushLength) -> DiffEncoderFlushFixed_sptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_make(self, modulus, flush, flushLength)


    def history(self):
        """history(DiffEncoderFlushFixed_sptr self) -> unsigned int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(DiffEncoderFlushFixed_sptr self, int which, int delay)
        declare_sample_delay(DiffEncoderFlushFixed_sptr self, unsigned int delay)
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(DiffEncoderFlushFixed_sptr self, int which) -> unsigned int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(DiffEncoderFlushFixed_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(DiffEncoderFlushFixed_sptr self) -> double"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_relative_rate(self)


    def start(self):
        """start(DiffEncoderFlushFixed_sptr self) -> bool"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_start(self)


    def stop(self):
        """stop(DiffEncoderFlushFixed_sptr self) -> bool"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(DiffEncoderFlushFixed_sptr self, unsigned int which_input) -> uint64_t"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(DiffEncoderFlushFixed_sptr self, unsigned int which_output) -> uint64_t"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(DiffEncoderFlushFixed_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(DiffEncoderFlushFixed_sptr self, int m)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(DiffEncoderFlushFixed_sptr self)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(DiffEncoderFlushFixed_sptr self) -> bool"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(DiffEncoderFlushFixed_sptr self, int m)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(DiffEncoderFlushFixed_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(DiffEncoderFlushFixed_sptr self, int i) -> long"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(DiffEncoderFlushFixed_sptr self, long max_output_buffer)
        set_max_output_buffer(DiffEncoderFlushFixed_sptr self, int port, long max_output_buffer)
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(DiffEncoderFlushFixed_sptr self, int i) -> long"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(DiffEncoderFlushFixed_sptr self, long min_output_buffer)
        set_min_output_buffer(DiffEncoderFlushFixed_sptr self, int port, long min_output_buffer)
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(DiffEncoderFlushFixed_sptr self, int which) -> float
        pc_input_buffers_full(DiffEncoderFlushFixed_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(DiffEncoderFlushFixed_sptr self, int which) -> float
        pc_input_buffers_full_avg(DiffEncoderFlushFixed_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(DiffEncoderFlushFixed_sptr self, int which) -> float
        pc_input_buffers_full_var(DiffEncoderFlushFixed_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(DiffEncoderFlushFixed_sptr self, int which) -> float
        pc_output_buffers_full(DiffEncoderFlushFixed_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(DiffEncoderFlushFixed_sptr self, int which) -> float
        pc_output_buffers_full_avg(DiffEncoderFlushFixed_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(DiffEncoderFlushFixed_sptr self, int which) -> float
        pc_output_buffers_full_var(DiffEncoderFlushFixed_sptr self) -> pmt_vector_float
        """
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(DiffEncoderFlushFixed_sptr self) -> float"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(DiffEncoderFlushFixed_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(DiffEncoderFlushFixed_sptr self)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(DiffEncoderFlushFixed_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(DiffEncoderFlushFixed_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(DiffEncoderFlushFixed_sptr self) -> int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(DiffEncoderFlushFixed_sptr self, int priority) -> int"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(DiffEncoderFlushFixed_sptr self) -> std::string"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_name(self)


    def symbol_name(self):
        """symbol_name(DiffEncoderFlushFixed_sptr self) -> std::string"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(DiffEncoderFlushFixed_sptr self) -> io_signature_sptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(DiffEncoderFlushFixed_sptr self) -> io_signature_sptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(DiffEncoderFlushFixed_sptr self) -> long"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(DiffEncoderFlushFixed_sptr self) -> basic_block_sptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(DiffEncoderFlushFixed_sptr self, int ninputs, int noutputs) -> bool"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(DiffEncoderFlushFixed_sptr self) -> std::string"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(DiffEncoderFlushFixed_sptr self, std::string name)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(DiffEncoderFlushFixed_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(DiffEncoderFlushFixed_sptr self) -> swig_int_ptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(DiffEncoderFlushFixed_sptr self) -> swig_int_ptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(DiffEncoderFlushFixed_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _Custom_swig.DiffEncoderFlushFixed_sptr_message_subscribers(self, which_port)

DiffEncoderFlushFixed_sptr_swigregister = _Custom_swig.DiffEncoderFlushFixed_sptr_swigregister
DiffEncoderFlushFixed_sptr_swigregister(DiffEncoderFlushFixed_sptr)


DiffEncoderFlushFixed_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DiffEncoderFlushFixed = DiffEncoderFlushFixed.make;



